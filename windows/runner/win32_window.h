#ifndef RUNNER_WIN32_WINDOW_H_\n#define RUNNER_WIN32_WINDOW_H_\n\n#include <windows.h>\n#include <functional>\n#include <memory>\n#include <string>\n\nclass Win32Window {\n public:\n  struct Point {\n    unsigned int x;\n    unsigned int y;\n    Point(unsigned int x, unsigned int y) : x(x), y(y) {}\n  };\n\n  struct Size {\n    unsigned int width;\n    unsigned int height;\n    Size(unsigned int width, unsigned int height)\n        : width(width), height(height) {}\n  };\n\n  Win32Window();\n  virtual ~Win32Window();\n\n  bool CreateAndShow(const std::wstring& title, const Point& origin,\n                     const Size& size);\n\n  bool Show();\n\n  HWND GetHandle();\n\n  void SetQuitOnClose(bool quit_on_close);\n\n  bool SetIcon(const std::wstring& icon_path);\n\n  bool SetIcon(const HICON icon);\n\n protected:\n  virtual bool OnCreate();\n\n  virtual void OnDestroy();\n\n  virtual LRESULT MessageHandler(HWND window, UINT const message,\n                               WPARAM const wparam, LPARAM const lparam);\n\n  HWND window_handle_ = nullptr;\n\n  void SetChildContent(HWND content);\n\n  RECT GetClientArea();\n\n  HWND GetChildContent() const;\n\n private:\n  bool quit_on_close_ = false;\n  HWND child_content_ = nullptr;\n\n  void RegisterWindowClass();\n\n  static LRESULT CALLBACK WndProc(HWND const window, UINT const message,\n                                WPARAM const wparam, LPARAM const lparam) noexcept;\n\n  std::wstring window_class_name_ = {};\n  \n  static Win32Window* GetThisFromHandle(HWND const window) noexcept;\n  \n  static int Scale(int source, double scale_factor);\n  \n  static const wchar_t* GetWindowClass(HINSTANCE hInstance);\n  \n  void Destroy();\n};\n\n#endif  // RUNNER_WIN32_WINDOW_H_"